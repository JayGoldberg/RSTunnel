#!/bin/sh

## Reliable SSH Tunnel
##
## RSTunnel written by:
##			"Amram Bentolila" <amram@manhattanprojects.com>
##			"Jay Goldberg" <jaymgoldberg@gmail.com>
## 
## Contributors:  	
##			"Chad Trabant" <chad.trabant@knmi.nl>
##

#set -x

LoadConfig() {
  DebugMsg ">> Loading config file"
  if [ ! -f ./rstunnel.conf ]; then
    ErrMsg "[FATAL] Can't find rstunnel.conf. Run install.sh to \
    generate rstunnel.conf or cd into your rstunnel installation \
    directory" >&2
    exit 1
  else
    . ./rstunnel.conf
  fi
  DebugMsg ">> Config file loaded"
}

# error check function
ErrorCheck() {
  local ERR=$?
  local MSG=$1

  if [ "$ERR" -ne 0 ]; then
    ErrMsg "$MSG: $ERR, exiting!"
    TunKill
    exit 1
  fi
}

Usage() {
  cat <<HEREDOC
Usage: rstunnel [OPTION]
RSTunnel (Reliable SSH Tunnel) maintains a secure tunnel between two
hosts. By default, will start the tunnel and fork into the background.
can also start from cron, or in foreground daemon mode (and
also from cron)

  -e, --email     Turn on the e-mail feature. If the tunnel goes down, an e-mail
                  will be sent to the address figured. Be sure to add the template
                  file 'mail.message' exists in the directory where rstunnel resides
                  . This is the source of the mail message. Useful when rstunnel is
                  running from a cron job or in the background using '-d' option
  -v, -vv, --verbose
                  '-v' is VERBOSE output, ' is VERBOSE output, '-vv' is DEBUG
                  output. It is not reccomended that you run in DEBUG mode when
                  running in cron as there is quite a lot of output
  -s, --status    List active tunnels matching config
  -k, --kill      Kill an existing tunnel(s) matching config
  -d, --daemon    Daemonize, run in a constant watch loop in foreground
  -?, -h, --help  This help message
HEREDOC
  exit 1
}

CheckOS() {
  DebugMsg ">> Checking OS"
  case $(uname) in
    SunOS)
      OS='SunOS'
      ;;
    Linux)
      OS='Linux'
      ;;
    FreeBSD)
      OS='FreeBSD'
      ;;
    *)
      ErrMsg "[FATAL] Sorry, your OS is not supported."
      exit 1
    ;;
  esac
}

MailUser() {
  if [ "$X_EMAIL" ]; then
    DebugMsg ">> emailing restart message "
    if [ ! -f mail.message ]; then
      ErrMsg "Mail misconfiguration"
      InfoMsg "File: 'mail.message' can't be found"
      InfoMsg "Mail can't be sent due to missing file. Please be sure \
      to add this fileto the current working directory with your \
      message written in the file."
      exit 1
    fi

    # E-mail User, saying the tunnel was down, and now restarted.
    for emailuser in $EMAIL; do
      mail -s "Tunnel_Restarted" $emailuser < mail.message
      local EXITCODE=$?
      if [ "$EXITCODE" -ne 0 ]; then
        ErrMsg "Problem sending mail"
        return $EXITCODE
      fi
      InfoMsg "Mail Sent: "$emailuser
    done
  fi
}

TunRun() {
  DebugMsg ">> running command \"$SSHPATH $SSHFLAGS ${REMOTEUSER}@$REMOTEHOSTNAME sleep 99999999999\""
    $SSHPATH $SSHFLAGS ${REMOTEUSER}@$REMOTEHOSTNAME sleep 99999999999
}

TunKill() {
  local pids="$(SearchPID)"

  if [ "$pids" ]; then
    InfoMsg ">> Killing SSH process(es) ($pids)"
    kill -9 $pids
    ErrorCheck "Attempted to kill process"
  else
    InfoMsg ">> No SSH process(es) found that match config"
    exit 1
  fi
}

SetConfig() {
  DebugMsg ">> Setting variables"
  if [ "$REVERSEPORT" ]; then
    DebugMsg ">> configuring in reverse mode"
    LOCALPORT=${LOCALPORT:-22}
    REMOTEIP=${REMOTEIP:-localhost}
    MODE=reverse
  elif [ "$CHECKPORT" ] || [ "$REMOTEIP" ] || [ "$REMOTEPORT" ]; then
    unset CONFIGFILE
    return
  else
    # Let's try to get all the paramaters out of the ssh configfile
    if [ "$CONFIGFILE" -a -f "$CONFIGFILE" ]; then
      DebugMsg ">> Parsing SSH config"
      CHECKPORT=$(grep "LocalForward" "$CONFIGFILE" | grep -v "#" | sed -e s/=/\ /g | awk '{print $2}')
      REMOTEIP=$(grep "LocalForward" "$CONFIGFILE" | grep -v "#" | sed -e s/=/\ /g | awk '{print $3}' | awk -F':' '{print $1}')
      REMOTEPORT=$(grep "LocalForward" "$CONFIGFILE" | grep -v "#" | sed -e s/=/\ /g | awk '{print $3}' | awk -F':' '{print $2}')
    elif [ ! "$CHECKPORT" ] || [ ! "$REMOTEIP" ] || [ ! "$REMOTEPORT" ]; then
      ErrMsg "[FATAL] Can't find $CONFIGFILE and CHECKPORT, REMOTEIP and REMOTEPORT are not defined in rstunnel.conf"
    fi

    # is CHECKPORT defined?
    # TODO: is this necessary?
    if [ grep "LocalForward $CHECKPORT $REMOTEIP:$REMOTEPORT" "$CONFIGFILE" ]; then
      echo -n ""
    else
      if [ ! "$CHECKPORT" ] || [ ! "$REMOTEIP" ] || [ ! "$REMOTEPORT" ]; then
        # Let's confirm with the user that we are going to add in a "LocalForward" line
        # in the ~/.ssh/config.
        ErrMsg "[FATAL] Can't find LocalForward for RSTunnel."
        echo -n "Do you want me to add it in the config file for you? [y/n] > "
        read value
        while [ ! "$value" ]; do
          echo -n "Invalid selection. Please select [y/n] > "
          read value
        done

        if [ "$value" = "y" ]; then
          if [ -w "$CONFIGFILE" ]; then
            echo "## ADDED BY: RSTunnel " >> "$CONFIGFILE"
            echo "LocalForward "$CHECKPORT" "$REMOTEIP":"$REMOTEPORT >> "$CONFIGFILE"
            echo "Added: LocalForward "$CHECKPORT" "$REMOTEIP":"$REMOTEPORT
            sleep 2
          else
            ErrMsg "[FATAL] Unable to write to file: "$CONFIGFILE
            ErrMsg "Make sure the line 'LocalForward $CHECKPORT $REMOTEIP:$REMOTEPORT' is added to your $CONFIGFILE"
            exit 1
          fi
        else
            ErrMsg "Make sure the line 'LocalForward $CHECKPORT $REMOTEIP:$REMOTEPORT' is added to your $CONFIGFILE"
            exit 1
        fi
      fi
    fi
  fi
}

# test the connection through the tunnel
TestConnection() {
  if [ ! "$TESTCONNECTION" ]; then
    DebugMsg ">> No connection test needed for this environment"
    return
  fi

  DebugMsg ">> running command \"echo \"Testing Connection\" | nc $NCFLAGS localhost $CHECKPORT\""
  echo "test data" | nc $NCFLAGS localhost $CHECKPORT 2>&1 >/dev/null

  if [ "$?" -ne 0 ]; then
    ErrMsg ">> [ F A I L E D ]"
    ErrMsg ">> Do you have a check port defined in your SSH config?"
    InfoMsg "===> Attempting to restart tunnel"
 
    TunKill; ErrorCheck "killing tunnel"

    TunRun; ErrorCheck "starting tunnel"

    MailUser
  else
    InfoMsg "===> Tunnel is up and running ()"
  fi
}

IsLinked() {
  # TODO what if `which` doesn't exist? `which` is actually a shell script
  [ ! "$#" -eq 2 ] && { echo "wrong argument count" >&2; return 4; }
  local destexe="$(which $2)"
  local exe="$(which $1)"
  
  [ ! -f "$destexe" ] || [ ! -e "$exe" ] && { echo "some of the paths do not exist" >&2; return 1; }

  # is $exe a symlink?, if so, is it pointing to $destexe?
  if [ -L "$exe" ] && [ "$(basename $(readlink $exe))"  = "$(basename $destexe)" ]; then
    echo "true"
  # is it a hardlink to $destexe?
  # TODO: what if `stat` is not available? (ls -i $exe | cut -d' ' -f1)
  elif [ "$(stat -c %i $exe)" = "$(stat -c %i $destexe)" ]; then
    echo "true"
  else
    echo "false"
  fi
}

SetFlags() {
  DebugMsg ">> Setting command options"
  SSHFLAGS="-N -f"
  NCFLAGS="-w 5"

  # reverse tunnel mode
  if [ "$MODE" = "reverse" ]; then
    # TODO dynamic grab of remote port using web service, though
    # this should be done with a separate flag for mode and a flag
    # for allowing remote lookup
    SSHFLAGS="$SSHFLAGS -R ${REVERSEPORT}:${REMOTEIP}:${LOCALPORT}"
  else
    SSHFLAGS="$SSHFLAGS -L ${CHECKPORT}:${REMOTEIP}:${REMOTEPORT}"
  fi

  # check for dropbear
  DebugMsg ">> Checking for dropbear"  

  if [ "$(IsLinked ssh dropbearmulti)" = "true" -o "$(IsLinked ssh dropbear)" = "true" ]; then
    DebugMsg ">> Found dropbear"
    # 'K' option negates need for tunnel connectivity check
    SSHFLAGS="$SSHFLAGS -i $IDENTITYFILE -K $KEEPALIVE -y"
    TESTCONNECTION=false
  elif [ "$CONFIGFILE" ]; then
    DebugMsg ">> No dropbear, using SSH config"
    # TODO use builtin keepalive on real OpenSSH client? (-o ServerAliveInterval=5)
    # or -o StrictHostKeyChecking=off
    #TESTCONNECTION=false
    SSHFLAGS="$SSHFLAGS -n -i $IDENTITYFILE -F $CONFIGFILE"
  fi

  # check for type of netcat
  DebugMsg ">> Checking for busybox netcat"
  [ "$(IsLinked nc busybox)" = "true" ] &&  NCFLAGS="-w 5 -q 1 -i 1"

  # check what kind of OS is running to determine the flags for the "ps" command
  DebugMsg ">> Setting OS-specific flags"
  if [ $OS = "FreeBSD" -o $OS = "Linux" ]; then
    PSFLAGS="-awx"
    [ "$(IsLinked ps busybox)" = "true" ] && PSFLAGS="-w"
    SEARCHPID="pgrep -f -d' ' \"$REMOTEHOSTNAME sleep\""
  elif [ $OS = "SunOS" ]; then
    PSFLAGS="-ewf"
    SEARCHPID="ps $PSFLAGS | grep ssh | grep \"$REMOTEHOSTNAME sleep\" |  cut -d' ' -f2"
  else
    ErrMsg "[FATAL] Sorry, your OS is not supported."
    exit 1
  fi

  [ "$DEBUG" ] && ( NCFLAGS="$NCFLAGS -v"; SSHFLAGS="$SSHFLAGS -vvv" )
  DebugMsg ">> Done setting OS-specific flags"
}

SearchPID() {
  local pids="$(eval "$SEARCHPID")"

  if [ "$pids" ]; then
    echo "$pids"
  else
    return 1
  fi
}

DebugMsg() {
  [ "$VERBOSE" ] && echo "$1" >&2
}

ErrMsg() {
  echo "$1" >&2
}

InfoMsg() {
  echo "$1"
}

Init() {
  DebugMsg "===> Doing some preliminary checks"

  CheckOS
  SetConfig
  SetFlags
}

Main() {
  [ "$STARTMAIN" = "false" ] && return 0

  DebugMsg ">> Checking for required binaries"
  for cmd in "ssh"; do
    if [ ! $(which $cmd) ]; then
      ErrMsg "[FATAL] Can't find $cmd, make sure the required binaries \
      are installed and that their paths in the config are correct"
      exit 1
    fi
  done

  # TODO what about nc in conjunction with busybox?

  # check the proc listing for a active SSH tunnel running
  DebugMsg ">> Checking for active tunnel"
  local interpids="$(SearchPID)"
  [ "$interpids" ] && local pids="$(echo $interpids | tr '\n' ' ')" 

  if [ "$pids" ]; then
    InfoMsg  "===> Tunnel appears to be up ($pids)"
    InfoMsg  ">> Testing connection for $REMOTEHOSTNAME"

    # try to make a connection through the ssh forwarding port.
    TestConnection; ErrorCheck "testing connection"

    InfoMsg "===> Tunnel is passing traffic ($pids)"
  else
    DebugMsg "===> Tunnel doesn't appear to be up"
    InfoMsg ">> Attempting to start tunnel"

    TunRun; ErrorCheck "running tunnel"

    MailUser

    InfoMsg ">> Testing connection for $REMOTEHOSTNAME"

    TestConnection
    sleep 1 # TODO: why sleep here?
  fi
}

Daemonize() {
  local counter=0
  local last_count=$KEEPALIVE
  STARTMAIN=true

  DebugMsg ">> Starting daemon loop"
  while true; do
    while [ "$counter" -lt "$last_count" ]; do
      counter=0
      sleep 2
      InfoMsg $(date)" "$HOSTNAME": RSTunnel daemon starting" >> $logfile
      DebugMsg ">> Calling Main()"
      Main #TODO: but keep in foreground
      while [ "$(SearchPID)" ]; do
        sleep 30
      done
      counter=$(( counter + 1 ))
    done
  done
}

trap TunKill INT

LoadConfig

STARTMAIN=true

for arg in $1 $2; do
  case $arg in
    -v|--verbose)
      VERBOSE=true
      ;;
    -vv)
      VERBOSE=true
      DEBUG=true
      DebugMsg "===>  DEBUGGING ON  <==="
      ;;
    -e|--email)
      X_EMAIL=true
      ;;
    -d|--daemon)
      Init
      Daemonize
      TunKill
      STARTMAIN=false
      ;;
    -s|--status)
      Init
      if [ "$(SearchPID)" ]; then
        InfoMsg "Tunnels running in PID(s) $SearchPID"
        exit
      else
        InfoMsg "No running tunnels found"
        exit 1
      fi 
      STARTMAIN=false
      exit
      ;;
    -k|--kill)
      Init
      TunKill
      STARTMAIN=false
      exit
      ;;
    -?|--help|-h)
      Usage
      exit
      ;;
  esac
done

Init
Main
