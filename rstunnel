#!/bin/sh

## Reliable SSH Tunnel
##
## RSTunnel written by: Amram Bentolila
##			amram@manhattanprojects.com 
## 
## Contributors:  	
##			Chad Trabant - chad.trabant@knmi.nl
##			Jay Goldberg - jaymgoldberg@gmail.com

LoadConfig() {
    if [ ! -x ./rstunnel.conf ]; then
        echo "[FATAL] Can't find rstunnel.conf. Run install.sh to generate rstunnel.conf";
        exit 1
    else
        . ./rstunnel.conf
    fi
}

# error check function
ErrorCheck() {
    local ERR=$?
    if [ $ERR -ne 0 ]; then
        echo "Error Code: "$ERR
        echo "Exiting!"
        [ -f tempfile.out ] && rm tempfile.out
        [ -f temp.out ] && rm temp.out
        [ ! -z $INSTALL ] && rm -rf ${XPWD}/temp
        exit 1
    fi
}

Usage() {
    cat <<HEREDOC
    Usage: ./rstunnel [-e]/[-v/-vv]/[-?/-h]
    RSTunnel (Reliable SSH Tunnel) maintains a secure tunnel between two hosts. Can be run interactively, through cron, or using rstunneld (also can be called from cron).

      [-e]  Turn on the e-mail feature. If the tunnel goes down, an e-mail will be
            sent to the address figured. Be sure to add the template file 'mail.message'
            exists in the directory where rstunnel resides. This is the source of the
            mail message. Useful when rstunnel is running from a cron job or in the
            background using rstunneld

      [-v/-vv]  '-v' is VERBOSE output, ' is VERBOSE output, '-vv' is DEBUG output. It is
            not reccomended that you run in DEBUG mode when running in cron as there is
            quite a lot of output

      [-?]  This help message
HEREDOC
    exit 1
}

CheckOS() {
    case $(uname) in
        SunOS)
            OS='SunOS'
            ;;
        Linux)
            OS='Linux'
            ;;
        FreeBSD)
            OS='FreeBSD'
            ;;
        *)
            echo "[FATAL] Sorry, your OS is not supported."
            exit 1
            ;;
    esac
}

MailUser() {
    if [ ! -f mail.message ]; then
        echo "File: 'mail.message' can't be found"
        echo "Mail can't be sent due to missing file. Please be sure to add this file"
        echo "to the current working directory with your message written in the file."
        exit 1
    fi
    # E-mail User, saying the tunnel was down, and now restarted.
	for emailuser in $EMAIL; do
		mail -s "Tunnel_Restarted" $emailuser < mail.message
		echo "";
		echo "Mail Sent: "$emailuser
	done  
}

TunRun() {
    DebugMsg ">> running command \"$SSHPATH $SSHFLAGS $REMOTEHOSTNAME sleep 99999999999\""
	$SSHPATH $SSHFLAGS $REMOTEHOSTNAME sleep 99999999999
}

# test the connection through the tunnel
TestConnection() {
	local NETWAIT=10
    
    timeout 10 echo "Testing Connection" | nc $FLAGS localhost $CHECKPORT 2>&1 >/dev/null
    ERR=$?
    
    if [ $ERR -ne 0 ]; then 
		DebugMsg ">> [ F A I L E D ]"
		DebugMsg "===> Attempting to restart tunnel"
		DebugMsg ">> Killing Old SSH Process"
		
		${KILLCMD} | ${SHELLPATH}; ERR=$?
		
		if [ $ERR -ne 0 ]; then
			echo "[FATAL] Unable to kill previous process";
			exit 1
		fi

		TunRun
	  
		ErrorCheck
		
		if [ ! -z $X_EMAIL ]; then	
			MailUser
		fi
    fi
}

SetFlags() {
	NCFLAGS="-w $NETWAIT -q 1 -i 1"
	SSHFLAGS="-n -f -F $CONFIGFILE"
	
	# check what kind of OS is running to determine the flags for the "ps" command
	if [ $OS = "FreeBSD" -o $OS = "Linux" ]; then
		PSFLAGS="-awx"
		KILLCMD=$(ps $PSFLAGS | grep ssh | grep "$REMOTEHOSTNAME sleep" | awk '{print "kill -9 "$1}')
		[ -z $CONFIGFILE ] && CONFIGFILE=~/.ssh/config
	elif [ $OS = "SunOS" ]; then
		PSFLAGS="-ewf"
		KILLCMD=$(ps $PSFLAGS | grep ssh | grep "$REMOTEHOSTNAME sleep" | awk '{print "kill -9 "$2}')
		[ -z $CONFIGFILE ] && CONFIGFILE=~/.ssh/config
	else 
		echo "[FATAL] Sorry, your OS is not supported."
		exit 1
	fi
	
	[ ! -z $DEBUG ] && ( NCFLAGS="$FLAGS -v"; SSHFLAGS="$SSHFLAGS -vvv" )
}

DebugMsg() {
	local msg="$1"
	[ $VERBOSE ] && echo "$msg"
}

for arg in $1 $2; do
    case $arg in
        -v)
            VERBOSE=on
            ;;
        -vv)
            VERBOSE=on
            DEBUG=on
            echo "===>  DEBUGING ON  <==="
            ;;
        -e)
            X_EMAIL=on
            ;;
        -?)
            Usage
            ;;
    esac
done

LoadConfig

DebugMsg "===> Doing some preliminary checks"

CheckOS

SetFlags

# check that required binaries are available
for cmd in "nc" "sh" "ssh" ; do
    if [ ! $(command -v $cmd) ]; then
        echo "[FATAL] Can't find $cmd, make sure the required binaries are installed and that their paths in the config are correct"
        exit 1
    fi
done

# Let's get all the perameters out of the ssh configfile
if [ -f "$CONFIGFILE" ]; then
    LOCALPORT=$(grep "LocalForward" $CONFIGFILE | grep -v "#" | sed -e s/=/\ /g | awk '{print $2}')
    REMOTEIP=$(grep "LocalForward" $CONFIGFILE | grep -v "#" | sed -e s/=/\ /g | awk '{print $3}' | awk -F':' '{print $1}')
    REMOTEPORT=$(grep "LocalForward" $CONFIGFILE | grep -v "#" | sed -e s/=/\ /g | awk '{print $3}' | awk -F':' '{print $2}')
else
    echo "[FATAL] Can't find "$CONFIGFILE
    exit 1
fi

# We have to make sure that we set aside a special port for netcat on
# the same tunnel as a true test of the connectivity requires we send
# some data through throught it using netcat
grep "LocalForward $CHECKPORT $REMOTEIP:$REMOTEPORT" $CONFIGFILE > tempfile.out

if [ -s tempfile.out ]; then
    echo -n ""
else
    # Let's confirm with the user that we are going to add in a "LocalForward" line
    # in the ~/.ssh/config.
    echo "[FATAL] Can't find LocalForward for RSTunnel."
    echo -n "Do you want me to add it in the config file for you? [y/n] > "
    read value
    while [ -z $value ]; do
        echo -n "Invalid selection. Please select [y/n] > "
        read value
    done

    if [ $value = "y" ]; then
        if [ -w "$CONFIGFILE" ]; then
            echo "## ADDED BY: RSTunnel " >> "$CONFIGFILE"
            echo "LocalForward "$CHECKPORT" "$REMOTEIP":"$CHECKPORT >> "$CONFIGFILE"
            echo "Added: LocalForward "$CHECKPORT" "$REMOTEIP":"$CHECKPORT
            sleep 2

            else
            echo "[FATAL] Unable to write to file: "$CONFIGFILE
            echo "Make sure the line 'LocalForward $CHECKPORT $REMOTEIP:$CHECKPORT' is added to your $CONFIGFILE"
            exit 1
        fi
    else
        echo "Make sure the line 'LocalForward $CHECKPORT $REMOTEIP:$CHECKPORT' is added to your $CONFIGFILE"
        exit 1
    fi
fi

# check the proc listing for a active SSH tunnel running
ps $PSFLAGS | grep ssh | grep $REMOTEHOSTNAME | grep -v "grep "$REMOTEHOSTNAME | grep -v "sshd" > temp.out

if [ -s temp.out ]; then
	  DebugMsg  "===> Tunnel appears to be up"
	  DebugMsg  ">> Testing connection for $REMOTEHOSTNAME"

    # try to make a connection through the ssh forwarding port.
    TestConnection

    DebugMsg "===> Tunnel is still up and running"
else 
    DebugMsg "===> Tunnel doesn't appear to be up"
    DebugMsg ">> Attempting to start tunnel"
    
    TunRun
        
    ErrorCheck
    
    if [ ! -z $X_EMAIL ]; then
        MailUser
    fi
    
    DebugMsg ">> Testing connection for $REMOTEHOSTNAME"
    
    TestConnection
    sleep 1 # TODO: why sleep here?
    
    DebugMsg "===> Tunnel is up and running"
fi

[ ! -z $VERBOSE ] && echo "===> Cleaning up"

rm -f tempfile.out
rm -f temp.out
